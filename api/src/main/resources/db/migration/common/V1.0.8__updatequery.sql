-- üîÑ Alter table branch: Add clinic_id
ALTER TABLE "branch"
ADD COLUMN IF NOT EXISTS "clinic_id" INTEGER,
ADD CONSTRAINT "fk_branch_clinic" FOREIGN KEY ("clinic_id") REFERENCES "clinic"("id") ON DELETE CASCADE;

-- üîÑ Alter table doctor: Add slug, remove consultation_fee
ALTER TABLE "doctor"
ADD COLUMN "slug" VARCHAR(255) UNIQUE,
DROP COLUMN IF EXISTS "consultation_fee";

-- ‚ùå Drop old doctor_branch
DROP TABLE IF EXISTS "doctor_branch" CASCADE;

-- ‚úÖ Create doctor_branch
CREATE TABLE IF NOT EXISTS "doctor_branch" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY,
    "doctor_id" BIGINT NOT NULL,
    "branch_id" BIGINT NOT NULL,
    "consultation_fee" DOUBLE PRECISION,
    PRIMARY KEY ("id"),
    CONSTRAINT "fk_doctor" FOREIGN KEY ("doctor_id") REFERENCES "doctor" ("id") ON DELETE CASCADE,
    CONSTRAINT "fk_branch" FOREIGN KEY ("branch_id") REFERENCES "branch" ("id") ON DELETE CASCADE,
    CONSTRAINT "uc_doctor_branch" UNIQUE ("doctor_id", "branch_id")
);

-- üîÑ Alter table doctor_slot: Use doctor_branch_id
ALTER TABLE "doctor_slot" 
DROP COLUMN IF EXISTS "branch_id",
DROP COLUMN IF EXISTS "doctor_id",
ADD COLUMN "doctor_branch_id" INTEGER,
ADD CONSTRAINT "fk_doctor_slot_doctor_clinic_id" FOREIGN KEY ("doctor_branch_id") REFERENCES "doctor_branch"("id") ON DELETE CASCADE;

-- üîÑ Alter table appointment: Use doctor_branch_id
ALTER TABLE "appointment" 
DROP COLUMN IF EXISTS "doctor_clinic_id",
ADD COLUMN "doctor_branch_id" INTEGER,
ADD CONSTRAINT "fk_appointment_doctor_clinic_id" FOREIGN KEY ("doctor_branch_id") REFERENCES "doctor_branch"("id") ON DELETE CASCADE;

-- ‚ùå Drop deprecated views/tables
DROP VIEW IF EXISTS "doctor_clinic_map_view";
DROP TABLE IF EXISTS "clinic_branch";
DROP TABLE IF EXISTS "doctor_clinic";


CREATE OR REPLACE VIEW doctor_clinic_map_view AS
SELECT 
    d.id AS doctor_id,
    CONCAT(d.firstname, ' ', d.lastname) AS doctor_name,
    c.id AS clinic_id,
    c.name AS clinic_name,
    d.gender,
    d.exp_year AS experience_years,
    d.city,
    STRING_AGG(DISTINCT s.name, ', ') AS specialties,
    STRING_AGG(DISTINCT l.name, ', ') AS languages,
    AVG(DISTINCT dr.rating) AS average_rating,
    COUNT(DISTINCT dr.id) AS review_count,
    COALESCE(db.consultation_fee, 500) AS price,
    d.image AS profile_image
FROM doctor_branch db
JOIN doctor d ON db.doctor_id = d.id
JOIN branch b ON db.branch_id = b.id
JOIN clinic c ON b.clinic_id = c.id
LEFT JOIN doctor_specialization ds ON d.id = ds.doctor_id
LEFT JOIN specialization s ON ds.specialization_id = s.id
LEFT JOIN doctor_language dl ON d.id = dl.doctor_id
LEFT JOIN language l ON dl.language_id = l.id
LEFT JOIN doctor_review dr ON dr.doctor_id = d.id
GROUP BY 
    d.id, 
    c.id, 
    d.firstname, 
    d.lastname, 
    d.gender, 
    d.exp_year, 
    d.city, 
    d.image, 
    db.consultation_fee;


