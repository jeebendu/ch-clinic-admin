
-- Create doctor_slot_release_rules table for granular slot release control
CREATE TABLE IF NOT EXISTS doctor_slot_release_rules (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    
    doctor_branch_id BIGINT NOT NULL,
    scope VARCHAR(20) NOT NULL CHECK (scope IN ('default', 'weekday', 'time_range')),
    
    weekday INTEGER NULL CHECK (weekday BETWEEN 0 AND 6),  -- 0 = Sunday, 6 = Saturday
    time_range_id BIGINT NULL,
    
    release_days_before INTEGER DEFAULT 1,
    release_time TIME DEFAULT '06:00:00',
    release_minutes_before_slot INTEGER DEFAULT NULL,
    
    is_active BOOLEAN DEFAULT TRUE,
    
    created_by VARCHAR(255) DEFAULT 'system',
    created_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_by VARCHAR(255),
    modified_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_release_doctor_branch 
        FOREIGN KEY (doctor_branch_id) REFERENCES doctor_branch(id) ON DELETE CASCADE,
    
    CONSTRAINT fk_release_time_range 
        FOREIGN KEY (time_range_id) REFERENCES doctor_time_ranges(id) ON DELETE SET NULL,
    
    CONSTRAINT weekday_scope_dependency 
        CHECK (
            (scope != 'weekday' OR weekday IS NOT NULL) AND 
            (scope != 'time_range' OR time_range_id IS NOT NULL)
        ),
    
    -- Ensure only one default rule per doctor_branch
    CONSTRAINT unique_default_rule 
        UNIQUE (doctor_branch_id, scope) 
        WHERE scope = 'default',
    
    -- Ensure only one rule per weekday per doctor_branch
    CONSTRAINT unique_weekday_rule 
        UNIQUE (doctor_branch_id, scope, weekday) 
        WHERE scope = 'weekday',
    
    -- Ensure only one rule per time_range
    CONSTRAINT unique_time_range_rule 
        UNIQUE (doctor_branch_id, scope, time_range_id) 
        WHERE scope = 'time_range'
);

-- Add index for performance
CREATE INDEX IF NOT EXISTS idx_doctor_slot_release_rules_doctor_branch 
    ON doctor_slot_release_rules(doctor_branch_id);

CREATE INDEX IF NOT EXISTS idx_doctor_slot_release_rules_scope 
    ON doctor_slot_release_rules(scope);

-- Add new status to slot table for unreleased slots
ALTER TABLE slot ADD COLUMN IF NOT EXISTS release_status VARCHAR(20) DEFAULT 'RELEASED' 
    CHECK (release_status IN ('PENDING', 'RELEASED', 'BLOCKED'));

-- Migrate existing release settings to default rules
INSERT INTO doctor_slot_release_rules (
    doctor_branch_id, 
    scope, 
    release_days_before, 
    release_time,
    created_by
)
SELECT 
    db.id,
    'default',
    COALESCE(ws.release_before, 1),
    COALESCE(ws.release_time, '06:00:00'),
    'migration'
FROM doctor_branch db
LEFT JOIN doctor_availability ws ON ws.doctor_branch_id = db.id 
WHERE db.id IS NOT NULL
ON CONFLICT DO NOTHING;
