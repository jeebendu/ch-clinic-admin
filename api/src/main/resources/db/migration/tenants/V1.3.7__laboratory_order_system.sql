
-- Laboratory Order System Implementation
-- This migration adds support for creating orders with multiple test categories and types

-- 1. Create Laboratory Orders Table
CREATE TABLE IF NOT EXISTS laboratory_orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    patient_id BIGINT NOT NULL,
    order_number VARCHAR(100) UNIQUE NOT NULL,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    priority VARCHAR(20) DEFAULT 'ROUTINE', -- URGENT, ROUTINE, STAT
    referring_doctor_id BIGINT,
    referring_doctor_name VARCHAR(200),
    clinical_history TEXT,
    special_instructions TEXT,
    total_amount DECIMAL(10,2) DEFAULT 0,
    paid_amount DECIMAL(10,2) DEFAULT 0,
    payment_status VARCHAR(20) DEFAULT 'PENDING', -- PENDING, PARTIAL, PAID
    order_status VARCHAR(50) DEFAULT 'PENDING', -- PENDING, IN_PROGRESS, COMPLETED, CANCELLED
    branch_id BIGINT,
    created_by VARCHAR(255),
    created_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_by VARCHAR(255),
    modified_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_lab_orders_patient FOREIGN KEY (patient_id) REFERENCES patient(id) ON DELETE CASCADE,
    CONSTRAINT fk_lab_orders_doctor FOREIGN KEY (referring_doctor_id) REFERENCES doctor(id),
    CONSTRAINT fk_lab_orders_branch FOREIGN KEY (branch_id) REFERENCES branch(id)
);

-- 2. Create Laboratory Order Items Table
CREATE TABLE IF NOT EXISTS laboratory_order_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    laboratory_order_id BIGINT NOT NULL,
    test_category_id BIGINT NOT NULL,
    test_type_id BIGINT NOT NULL,
    quantity INTEGER DEFAULT 1,
    unit_price DECIMAL(10,2) DEFAULT 0,
    total_price DECIMAL(10,2) DEFAULT 0,
    status VARCHAR(50) DEFAULT 'PENDING', -- PENDING, IN_PROGRESS, COMPLETED, CANCELLED
    sample_collection_date TIMESTAMP,
    sample_collection_notes TEXT,
    urgency VARCHAR(20) DEFAULT 'ROUTINE',
    created_by VARCHAR(255),
    created_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_by VARCHAR(255),
    modified_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_lab_order_items_order FOREIGN KEY (laboratory_order_id) REFERENCES laboratory_orders(id) ON DELETE CASCADE,
    CONSTRAINT fk_lab_order_items_category FOREIGN KEY (test_category_id) REFERENCES test_categories(id),
    CONSTRAINT fk_lab_order_items_type FOREIGN KEY (test_type_id) REFERENCES test_types(id)
);

-- 3. Create Test Type Pricing Table
CREATE TABLE IF NOT EXISTS test_type_pricing (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    test_type_id BIGINT NOT NULL,
    branch_id BIGINT,
    price DECIMAL(10,2) NOT NULL DEFAULT 0,
    discount_percentage DECIMAL(5,2) DEFAULT 0,
    tax_percentage DECIMAL(5,2) DEFAULT 0,
    effective_from DATE DEFAULT CURRENT_DATE,
    effective_to DATE,
    active BOOLEAN DEFAULT TRUE,
    created_by VARCHAR(255),
    created_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    modified_by VARCHAR(255),
    modified_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_test_pricing_type FOREIGN KEY (test_type_id) REFERENCES test_types(id) ON DELETE CASCADE,
    CONSTRAINT fk_test_pricing_branch FOREIGN KEY (branch_id) REFERENCES branch(id)
);

-- 4. Modify Test Reports Table to link to Laboratory Order Items
ALTER TABLE test_reports 
ADD COLUMN IF NOT EXISTS laboratory_order_item_id BIGINT;

ALTER TABLE test_reports 
ADD CONSTRAINT IF NOT EXISTS fk_test_reports_order_item 
    FOREIGN KEY (laboratory_order_item_id) REFERENCES laboratory_order_items(id);

-- 5. Create Required Indexes
-- Laboratory Orders Indexes
CREATE INDEX IF NOT EXISTS idx_lab_orders_patient ON laboratory_orders(patient_id);
CREATE INDEX IF NOT EXISTS idx_lab_orders_date ON laboratory_orders(order_date);
CREATE INDEX IF NOT EXISTS idx_lab_orders_status ON laboratory_orders(order_status);
CREATE INDEX IF NOT EXISTS idx_lab_orders_number ON laboratory_orders(order_number);
CREATE INDEX IF NOT EXISTS idx_lab_orders_branch ON laboratory_orders(branch_id);
CREATE INDEX IF NOT EXISTS idx_lab_orders_doctor ON laboratory_orders(referring_doctor_id);
CREATE INDEX IF NOT EXISTS idx_lab_orders_payment_status ON laboratory_orders(payment_status);

-- Laboratory Order Items Indexes
CREATE INDEX IF NOT EXISTS idx_lab_order_items_order ON laboratory_order_items(laboratory_order_id);
CREATE INDEX IF NOT EXISTS idx_lab_order_items_category ON laboratory_order_items(test_category_id);
CREATE INDEX IF NOT EXISTS idx_lab_order_items_type ON laboratory_order_items(test_type_id);
CREATE INDEX IF NOT EXISTS idx_lab_order_items_status ON laboratory_order_items(status);
CREATE INDEX IF NOT EXISTS idx_lab_order_items_collection_date ON laboratory_order_items(sample_collection_date);

-- Test Type Pricing Indexes
CREATE INDEX IF NOT EXISTS idx_test_pricing_type ON test_type_pricing(test_type_id);
CREATE INDEX IF NOT EXISTS idx_test_pricing_branch ON test_type_pricing(branch_id);
CREATE INDEX IF NOT EXISTS idx_test_pricing_active ON test_type_pricing(active);
CREATE INDEX IF NOT EXISTS idx_test_pricing_effective ON test_type_pricing(effective_from, effective_to);

-- Test Reports Order Item Index
CREATE INDEX IF NOT EXISTS idx_test_reports_order_item ON test_reports(laboratory_order_item_id);

-- 6. Create Sequence and Functions for Order Numbers
CREATE SEQUENCE IF NOT EXISTS lab_order_number_seq START 1000;

-- Function to generate laboratory order number
CREATE OR REPLACE FUNCTION generate_lab_order_number() RETURNS VARCHAR(100) AS $$
BEGIN
    RETURN 'LO-' || TO_CHAR(CURRENT_DATE, 'YYYY') || '-' || LPAD(nextval('lab_order_number_seq')::TEXT, 6, '0');
END;
$$ LANGUAGE plpgsql;

-- Function to set laboratory order number on insert
CREATE OR REPLACE FUNCTION set_lab_order_number()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.order_number IS NULL OR NEW.order_number = '' THEN
        NEW.order_number := generate_lab_order_number();
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to automatically set order number
CREATE TRIGGER IF NOT EXISTS trigger_set_lab_order_number
    BEFORE INSERT ON laboratory_orders
    FOR EACH ROW EXECUTE FUNCTION set_lab_order_number();

-- 7. Function to update order totals when items change
CREATE OR REPLACE FUNCTION update_order_totals()
RETURNS TRIGGER AS $$
BEGIN
    -- Update the total amount in laboratory_orders when order items change
    UPDATE laboratory_orders 
    SET total_amount = (
        SELECT COALESCE(SUM(total_price), 0)
        FROM laboratory_order_items 
        WHERE laboratory_order_id = COALESCE(NEW.laboratory_order_id, OLD.laboratory_order_id)
        AND status != 'CANCELLED'
    ),
    modified_time = CURRENT_TIMESTAMP
    WHERE id = COALESCE(NEW.laboratory_order_id, OLD.laboratory_order_id);
    
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;

-- Triggers to update order totals
CREATE TRIGGER IF NOT EXISTS trigger_update_order_totals_insert
    AFTER INSERT ON laboratory_order_items
    FOR EACH ROW EXECUTE FUNCTION update_order_totals();

CREATE TRIGGER IF NOT EXISTS trigger_update_order_totals_update
    AFTER UPDATE ON laboratory_order_items
    FOR EACH ROW EXECUTE FUNCTION update_order_totals();

CREATE TRIGGER IF NOT EXISTS trigger_update_order_totals_delete
    AFTER DELETE ON laboratory_order_items
    FOR EACH ROW EXECUTE FUNCTION update_order_totals();

-- 8. Function to update order status based on item statuses
CREATE OR REPLACE FUNCTION update_order_status()
RETURNS TRIGGER AS $$
DECLARE
    order_id BIGINT;
    pending_count INTEGER;
    in_progress_count INTEGER;
    completed_count INTEGER;
    cancelled_count INTEGER;
    total_count INTEGER;
    new_status VARCHAR(50);
BEGIN
    order_id := COALESCE(NEW.laboratory_order_id, OLD.laboratory_order_id);
    
    -- Count items by status
    SELECT 
        COUNT(*) FILTER (WHERE status = 'PENDING'),
        COUNT(*) FILTER (WHERE status = 'IN_PROGRESS'),
        COUNT(*) FILTER (WHERE status = 'COMPLETED'),
        COUNT(*) FILTER (WHERE status = 'CANCELLED'),
        COUNT(*)
    INTO pending_count, in_progress_count, completed_count, cancelled_count, total_count
    FROM laboratory_order_items 
    WHERE laboratory_order_id = order_id;
    
    -- Determine new order status
    IF total_count = cancelled_count THEN
        new_status := 'CANCELLED';
    ELSIF completed_count = total_count THEN
        new_status := 'COMPLETED';
    ELSIF in_progress_count > 0 OR completed_count > 0 THEN
        new_status := 'IN_PROGRESS';
    ELSE
        new_status := 'PENDING';
    END IF;
    
    -- Update order status
    UPDATE laboratory_orders 
    SET order_status = new_status,
        modified_time = CURRENT_TIMESTAMP
    WHERE id = order_id;
    
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;

-- Triggers to update order status
CREATE TRIGGER IF NOT EXISTS trigger_update_order_status_insert
    AFTER INSERT ON laboratory_order_items
    FOR EACH ROW EXECUTE FUNCTION update_order_status();

CREATE TRIGGER IF NOT EXISTS trigger_update_order_status_update
    AFTER UPDATE ON laboratory_order_items
    FOR EACH ROW EXECUTE FUNCTION update_order_status();

CREATE TRIGGER IF NOT EXISTS trigger_update_order_status_delete
    AFTER DELETE ON laboratory_order_items
    FOR EACH ROW EXECUTE FUNCTION update_order_status();

-- 9. Add comments for documentation
COMMENT ON TABLE laboratory_orders IS 'Main laboratory orders containing multiple test types for a patient';
COMMENT ON TABLE laboratory_order_items IS 'Individual test items within a laboratory order';
COMMENT ON TABLE test_type_pricing IS 'Pricing configuration for test types per branch';

COMMENT ON COLUMN laboratory_orders.order_number IS 'Unique order identifier (auto-generated)';
COMMENT ON COLUMN laboratory_orders.priority IS 'Order priority: ROUTINE, URGENT, STAT';
COMMENT ON COLUMN laboratory_orders.payment_status IS 'Payment status: PENDING, PARTIAL, PAID';
COMMENT ON COLUMN laboratory_orders.order_status IS 'Overall order status: PENDING, IN_PROGRESS, COMPLETED, CANCELLED';

COMMENT ON COLUMN laboratory_order_items.status IS 'Individual item status: PENDING, IN_PROGRESS, COMPLETED, CANCELLED';
COMMENT ON COLUMN laboratory_order_items.sample_collection_date IS 'When the sample was collected for this test';
COMMENT ON COLUMN laboratory_order_items.urgency IS 'Item level urgency: ROUTINE, URGENT, STAT';

COMMENT ON COLUMN test_reports.laboratory_order_item_id IS 'Links test report to specific order item';
